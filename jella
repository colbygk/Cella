#!/usr/bin/env jruby

$CLASSPATH << "lib/cs523-project2-cella.jar"

# java -Dlog4j.configuration=conf/default-stdout.xml -jar ${LIB_DIR}/cs523-project2.jar $*

include Java

import 'cs523.project2.CA'

import java.awt.Color
import java.awt.Dimension
import java.awt.event.ActionListener
import javax.swing.JFrame
import javax.swing.JPanel
import javax.swing.JButton
import javax.swing.SwingConstants
import javax.swing.SwingUtilities
import javax.swing.JLabel
import javax.swing.BorderFactory
import javax.swing.GroupLayout

import java.math.BigInteger
import java.security.SecureRandom

import java.lang.Thread

$radii = 3
$rule = ""
$size = 750
$rb = nil
$target_rho = 0.0;

class CAcanvas < JPanel

  def paintComponent g
    self.drawCA g
  end

  def drawCA g

    if ( $target_rho >= 1.0 )
      $target_rho = 0.0;
    else
      $target_rho += 0.05;
    end

    if ( $rule.length == 32 )
      $radii = 2
    elsif ( $rule.length == 128 )
      $radii = 3
    end

    ca = CA.new( $size, $radii )
    ca.setStopIfStatic( true )
    # ca.randomizedIC( $target_rho )
    ca.randomizedIC

    if ( $rule.length > 0 )
      ca.setRule( $rule.to_java )
    else
      ca.setRule( 16, SecureRandom.new )
    end
    ca.buildRulesMap

    g.setColor Color.new 0, 0, 0
    bm = 0
    ym = 1
    if ( $size < 200 )
      bm = 1
      ym = 2
    end
    p "rho0:#{ca.getRho0}"
    for y in (0..$size*ym).step(bm+1)
      ca.step
      x = 0
      ca.toString.each_char do |c|
        if c == "1"
          g.fillRect( x, y, 1+bm, 1+bm )
        end
        x = x + 1+bm
      end
    end
  end

end

class RadiusButton < JButton 
  include ActionListener

  def initialize( text )
    @r = 2
    @text = text
    super "#{@text} #{@r}"
    addActionListener self
    $radii = @r
  end

  def actionPerformed( event )
    if @r == 2
      @r = 3
    else
      @r = 2
    end
    self.text = "#{@text} #{@r}"
    $radii = @r
    SwingUtilities.invokeLater { repaint }
  end
end

class Jella < JFrame
  
    def initialize
        super "Jella"
        
        self.initUI
    end
      
    def initUI
        
      layout = GroupLayout.new self.getContentPane
      self.getContentPane.setLayout layout
      layout.setAutoCreateGaps true
      layout.setAutoCreateContainerGaps true


      cal = JLabel.new "Cellular Automata"
      c = CAcanvas.new
      bm = 1
      if ( $size < 200 )
        bm = 2
      end
      c.setMinimumSize Dimension.new $size*bm, $size*bm
      c.setMaximumSize Dimension.new $size*bm, $size*bm
      c.setPreferredSize Dimension.new $size*bm, $size*bm
      c.setBorder BorderFactory.createLineBorder Color.gray
      radiusButton = RadiusButton.new "Radius"
      $rb = radiusButton

      sgh = layout.createSequentialGroup
      pg1 = layout.createParallelGroup
      pg1.addComponent cal
      pg1.addComponent c
      pg1.addComponent radiusButton
      sgh.addGroup pg1
      layout.setHorizontalGroup sgh

      sgv = layout.createSequentialGroup
      pg2 = layout.createParallelGroup
      sgv.addComponent cal
      sgv.addComponent c
      sgv.addComponent radiusButton
      sgv.addGroup pg2
      layout.setVerticalGroup sgv


      self.pack

      self.setDefaultCloseOperation JFrame::EXIT_ON_CLOSE
      self.setLocationRelativeTo nil
      self.setVisible true

    end

end

if ARGV.length > 0
  if /[[:digit:]]/ === ARGV[0]
    $size = ARGV[0].to_i
  end
  if ARGV.length > 1
    $rule = ARGV[1]
  end
end

jella = Jella.new

while true do
  Thread.sleep 2000
  jella.repaint
end



